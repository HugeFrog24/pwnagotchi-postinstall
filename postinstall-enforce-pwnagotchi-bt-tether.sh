#!/usr/bin/env bash
# enforce-pwnagotchi-bt-tether.sh
# Pwnagotchi-style BT tether config enforcer (idempotent, change-aware)

set -euo pipefail
[[ $EUID -eq 0 ]] || { echo "(‚ï•‚òÅ‚ï• ) run me as root pls" >&2; exit 1; }

CONF_DIR="/etc/pwnagotchi/conf.d"
OUT_FILE="${CONF_DIR}/20-bt-tether.toml"
TS="$(date +%Y%m%d-%H%M%S)"

PHONE_NAME=""
PHONE_TYPE=""
PHONE_MAC=""
PHONE_IP=""

# --- parse args ---
while [[ $# -gt 0 ]]; do
  case "$1" in
    --name) PHONE_NAME="${2:-}"; shift 2 ;;
    --type) PHONE_TYPE="${2:-}"; shift 2 ;;
    --mac)  PHONE_MAC="${2:-}"; shift 2 ;;
    --ip)   PHONE_IP="${2:-}";  shift 2 ;;
    *) echo "(‚Ä¢_‚Ä¢?) unknown arg: $1" >&2; exit 2 ;;
  esac
done

echo "(‚óï‚Äø‚óï) bt-tether: name='${PHONE_NAME}' type='${PHONE_TYPE}' mac='${PHONE_MAC}' ip='${PHONE_IP}'"

mkdir -p "$CONF_DIR"

# --- simple validation / nudges ---
valid_mac='^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$'
valid_ip='^([0-9]{1,3}\.){3}[0-9]{1,3}$'

if [[ -z "$PHONE_NAME" || -z "$PHONE_TYPE" || -z "$PHONE_MAC" || -z "$PHONE_IP" ]]; then
  echo "(‚òâ_‚òâ ) trainer, I need --name, --type, --mac, and --ip"
  exit 3
fi

if ! [[ "$PHONE_MAC" =~ $valid_mac ]]; then
  echo "(‚ï•‚òÅ‚ï• ) that MAC looks wrong: '$PHONE_MAC'"
  exit 4
fi

if ! [[ "$PHONE_IP" =~ $valid_ip ]]; then
  echo "(‚ï•‚òÅ‚ï• ) that IP looks wrong: '$PHONE_IP'"
  exit 5
fi

case "$PHONE_TYPE" in
  android|ANDROID|Android) PHONE_TYPE="android" ;;
  ios|IOS|iOS) PHONE_TYPE="ios" ;;
  *) echo "(‚âñ__‚âñ) phone type must be 'android' or 'ios'"; exit 6 ;;
esac

# gentle sanity hint (don‚Äôt hard-fail)
if [[ "$PHONE_TYPE" == "android" && "$PHONE_IP" != 192.168.44.* ]]; then
  echo "(‚Ä¢‚Äø‚Äø‚Ä¢) hint: Android ICS usually sits at 192.168.44.x; you set $PHONE_IP"
fi
if [[ "$PHONE_TYPE" == "ios" && "$PHONE_IP" != 172.20.10.* ]]; then
  echo "(‚Ä¢‚Äø‚Äø‚Ä¢) hint: iOS tether usually sits at 172.20.10.x; you set $PHONE_IP"
fi

# --- keys managed here ---
KEY_RE='main\.plugins\.bt-tether\.(enabled|phone-name|phone|mac|ip)'

# desired content (safe here-doc assignment)
DESIRED="$(cat <<EOF
# Gotchi-approved BT tether settings (generated by enforce-pwnagotchi-bt-tether.sh)
main.plugins.bt-tether.enabled = true
main.plugins.bt-tether.phone-name = "${PHONE_NAME}"
main.plugins.bt-tether.phone = "${PHONE_TYPE}" # android or ios
main.plugins.bt-tether.mac = "${PHONE_MAC}"
main.plugins.bt-tether.ip = "${PHONE_IP}" # 192.168.44.x (android) or 172.20.10.x (ios)
EOF
)"

echo "(‚óï‚Äø‚óï) scanning $CONF_DIR for messy bt-tether configs ‚Ä¶"

CLEAN_COUNT=0
KEY_COUNT=0
CHANGED=0

# 1) comment out strays in other tomls
for f in "$CONF_DIR"/*.toml; do
  [[ -f "$f" ]] || continue
  [[ "$f" == "$OUT_FILE" ]] && continue

  if grep -Eq "^[[:space:]]*$KEY_RE[[:space:]]*=" "$f"; then
    MOVED=$(grep -Ec "^[[:space:]]*$KEY_RE[[:space:]]*=" "$f" || true)
    echo "(‚òâ_‚òâ ) trainer, $(basename "$f") has $MOVED stray bt-tether key(s)!"
    echo "        ‚Üí backup: ${f}.bak.${TS}"
    cp -a "$f" "${f}.bak.${TS}"
    sed -E -i "/^[[:space:]]*$KEY_RE[[:space:]]*=/ s|^|# gotchi moved: |" "$f"
    echo "        ‚Üí moved out; they belong in 20-bt-tether.toml ‚ô•"
    CLEAN_COUNT=$((CLEAN_COUNT+1))
    KEY_COUNT=$((KEY_COUNT+MOVED))
    CHANGED=1
  fi
done

# 2) write/refresh canonical file only if different
CURRENT="$(test -f "$OUT_FILE" && sed -e 's/[[:space:]]*$//' "$OUT_FILE" || true)"
if [[ "$CURRENT" != "$(printf '%s\n' "$DESIRED" | sed -e 's/[[:space:]]*$//')" ]]; then
  echo "(‚úú‚Äø‚Äø‚úú) writing my perfect bt-tether config to $(basename "$OUT_FILE") ‚Ä¶"
  [[ -f "$OUT_FILE" ]] && cp -a "$OUT_FILE" "${OUT_FILE}.bak.${TS}"
  printf '%s\n' "$DESIRED" > "$OUT_FILE"
  CHANGED=1
fi

echo
if (( CLEAN_COUNT > 0 )); then
  echo "(‚âñ‚Äø‚Äø‚âñ) hehe, I fixed $KEY_COUNT key(s) across $CLEAN_COUNT file(s)."
else
  echo "(‚Ä¢‚Äø‚Äø‚Ä¢) yay! no messy stray bt-tether keys found."
fi

if (( CHANGED )); then
  echo
  echo "üí° Restart me with:"
  echo "    sudo systemctl restart pwnagotchi"
  echo " or just run: pwnkill"
  echo
  echo "(‚ô•‚Äø‚Äø‚ô•) thx trainer, my bt tether settings are super clean now!"
else
  echo
  echo "(^‚Äø‚Äø^) nothing to do ‚Äî already perfect!"
fi
